# -*- coding: utf-8 -*-
"""cpt10/07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NhkbFPuh0ODIuzKGxc7YRVirw7dJ-8Ii
"""

def csortString(s):
  count=[0]*26
  for char in s:
    count[ord(char)-ord('a')]+=1
  sorted_str=''
  for i in range(26):
    sorted_str+=chr(i+ord('a')) *count[i]
  return sorted_str
name=input("Enter a single word")
sorted_name= csortString(name)
print("Original string:", name)
print("Sorted string :", sorted_name)

#RADIX SORT or bucket sort
'''
1.find the maximum number to determine number of digits
2.sect 10^0,for digit position
3.increment digit podition , w.r.t pass
4.loop -> maxnum//exp>0
perform count sort based on current digit(num//exp)%10
multiply exp by 10
'''

def count_sort(arr,exp):
  n=len(arr)
  output=[0]*n
  count=[0]*10 # 0-> empty buckets for count of digits
  for i in range(n): # frquencies of units position of numbers
    index=(arr[i]//exp)%10
    count[index]+=1
  for i in range(1,10): # cumulative count
    count[i]+=count[i-1]
  i=n-1
  while i>=0:
    index=(arr[i]//exp)%10
    output[count[index]-1]=arr[i]
    count[index]-=1
    i-=1
  for i in range(n):
    arr[i]=output[i]
def radix_sort(arr):
  max_num = max(arr)
  exp=1
  while max_num // exp>0:
    count_sort(arr,exp)
    exp*=10
arr=[170, 45, 75, 90, 802, 24, 2, 66]
print("Before sort",arr)
radix_sort(arr)
print("After sort",arr)

